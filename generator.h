#ifndef _GENERATOR_H_
#define _GENERATOR_H_
#include "maze.h"

/*
 * function_name:   DFS
 * input parameters:
 *                  node            - cell value that the DFS is currently on
 *                  adjacency_list  - address to list of adjacency_list instances
 *                  visited         - array of visited cells
 *                  mazeSize        - size of generated maze provided from arguments
 * return value:    void
 * description:     This function traverses through whole maze creating random structure of it using DFS algorithm
 *                  and ensuring that one cell is only visited once
 */
void DFS(int node, adjacency_list_t **adjacency_list, int *visited, int mazeSize);

/*
 * function_name:   removeRandomWalls
 * input parameters:
 *                  adjacency_list  - address to list of adjacency_list instances
 *                  mazeSize        - size of generated maze provided from arguments
 * return value:    void
 * description:     This function removes random walls from maze generated by DFS to provide maze that has more than 1 possible
 *                  path to exit
 */
void removeRandomWalls(adjacency_list_t **adjacency_list, int mazeSize);

/*
 * function_name:   getAdjacentNodes
 * input parameters:
 *                  node            - cell value
 *                  mazeSize        - size of generated maze provided from arguments
 * return value:    linked_list_t*  - pointer to head of a linked list containing cells adjacent to node
 * description:     This function creates a linked list contatining all possible cells adjacent to node in a maze
 */
linked_list_t *getAdjacentNodes(int node, int mazeSize);

/*
 * function_name:   isRemovalForbidden
 * input parameters:
 *                  first_node      - cell value to see if connection to second_node wouldn't create loop
 *                  second_node     - cell value to see if connection to first_node wouldn't create loop
 *                  adjacency_list  - list of adjacency_list instances
 *                  mazeSize        - size of generated maze provided from arguments
 * return value:    int             - value of 0 or 1, where 1 represents forbidden connection (one that would create loop when deleted from maze)
 * description:     This function returns value whether a connection between first_node and second_node can be made such that
 *                  it doesn't create loop in a maze
 */
int isRemovalForbidden(int first_node, int second_node, adjacency_list_t *adjacency_list, int mazeSize);

/*
 * function_name:   generateMaze
 * input parameters:
 *                  adjacency_list  - address to list of adjacency_list instances
 *                  mazeSize        - size of generated maze provided from arguments
 * return value:    void
 * description:     This function is a hook for main to start generating random maze of designed size. It uses DFS and removeRandomWalls
 *                  to create maze with multiple possible paths.
 */
void generateMaze(adjacency_list_t **adjacency_list, int mazeSize);

/*
 * function_name:   isNodeInLinkedList
 * input parameters:
 *                  node            - cell value to find in linked list
 *                  list            - pointer to a linked list instance in which we want to want node
 * return value:    int             - value of 0 or 1, where 1 represents that node is in a list
 * description:     This function returns value whether a node is in a linked list
 */
int isNodeInLinkedList(int node, linked_list_t *list);

#endif